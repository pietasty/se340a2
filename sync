#!/usr/bin/env python3
import sys
import os
import json
import time
import hashlib
from shutil import copyfile
from distutils.dir_util import copy_tree


class Directory:
    def __init__(self,path):
        self.path = path
        if not os.path.isdir(path):
            os.makedirs(path)        
        self.files = [ f for f in os.listdir(path) if os.path.isfile(os.path.join(path,f)) and not f.startswith('.') and not f.endswith('~')]
        self.subDirs = [ d for d in os.listdir(path) if os.path.isdir(os.path.join(path,d)) and not d.startswith('.')]
        self.sync = os.path.join(path,".sync")
        if not os.path.isfile(self.sync):
            self.makeSyncFile(self.sync,path)

    #Loads the sync file
    def loadSync(self):
        with open(self.sync,'r') as f:
            data = json.load(f)
        return data

    #Saves the sync file
    def saveSync(self,data):
        with open(self.sync,'w') as f:
            json.dump(data,f)

    #Makes a Sync file when it doesn't exist 
    def makeSyncFile(self,sync,folder):
        data = {}
        for doc in self.files:
            f = os.path.join(folder,doc)
            result = getFileData(f)
            data[doc] = []
            data[doc].append(result)
        self.saveSync(data)

    #Update the Sync file to recent changes
    def updateSyncFile(self):
        data = self.loadSync()
        keys = data.keys()

        for doc in self.files:
            f = os.path.join(self.path,doc)
            result = getFileData(f)
            #Check to see if new files have been added
            if doc not in keys:
                data[doc] = []
                data[doc].append(result)
            #Update files to reflect most recent changes
            else:
                #If the digest is the same
                if result[1] == data[doc][0][1]:
                    resulttime = strToTime(result[0])
                    jsontime = strToTime(data[doc][0][0])
                    if resulttime > jsontime:
                        data[doc][0][0] = timeToStr(resulttime)
                    elif jsontime > resulttime:
                        data[doc][0][0] = timeToStr(jsontime)
                #If digest is different 
                else:
                    data[doc].insert(0,result)
                    
        #Check if a file has been deleted
        for doc in keys:
            if doc not in self.files and not data[doc][0][1] == 'deleted':
                updateSyncToDelete(data[doc])

        self.saveSync(data)

    # Makes sure all the sync files in the sub directories are up to date
    def updateSubDirectories(self):
        for dirs in self.subDirs:
            fold = os.path.join(self.path,dirs)
            subDir = Directory(fold)
            subDir.updateSyncFile()
            subDir.updateSubDirectories()



#################################################################################
# Return a tuple of modification date and digest of a file
def getFileData(file):
    hashing = hashlib.sha256()
    edittime = time.localtime(os.path.getmtime(file))
    formattime = timeToStr(edittime)
    with open(file,'rb') as output:
        buf = output.read()
        hashing.update(buf)
    return (formattime,hashing.hexdigest())

################################################################################
# Updates syns file to delete
def updateSyncToDelete(syncinfo):
    formattime = timeToStr(time.localtime())
    syncinfo.insert(0,(formattime,'deleted'))

###############################################################################
# Converts time into a string
def timeToStr(t):
    return time.strftime("%Y-%m-%d %H:%M:%S +1200", t)

###############################################################################
# Converts string into a time object
def strToTime(s):
    return time.strptime(s, "%Y-%m-%d %H:%M:%S +1200")

##############################################################################
#Function that syncs the two directories
def syncDirectories(dir1,dir2):
    #Check if files have been superseded
    def checkIfSuperseded(list1,list2):
        first = list1[0][1]
        for i in range(1,len(list2)):
            if first == list2[i][1]:
                return True
        return False 

    #Deals with when a file has been deleted
    def checkDeletion(dic1,dic2,file1,file2):
        if len(dic2[doc]) == 1:
            os.remove(file2)
            updateSyncToDelete(dic2[doc])
        #Check to see if the other dir has remade the file
        elif not dic2[doc][0][1] == 'deleted' and dic2[doc][1][1] == 'deleted':
            # If deletion is more recent   
            if strToTime(dic1[doc][0][0]) > strToTime(dic2[doc][0][0]):
                os.remove(file2)
                updateSyncToDelete(dic2[doc])
            else:
                result = getFileData(file2)
                copyfile(file2,file1)
                dic1[doc].insert(0,result)
        else:
            os.remove(file2)
            updateSyncToDelete(dic2[doc])
    
    #Open the .sync files for analysis 
    data1 = dir1.loadSync()
    data2 = dir2.loadSync()

    #Start with dir1
    for doc in data1.keys():   
        f1 = os.path.join(dir1.path,doc)
        f2 = os.path.join(dir2.path,doc) 
        # If dir1 has a file that dir2 doesn't
        if doc not in data2.keys():
            # If dir1 says that the file is deleted, don't copy info over
            if data1[doc][0][1] == 'deleted':
                continue
            result1 = getFileData(f1)
            data2[doc] = []
            data2[doc].append(result1)
            copyfile(f1,f2)
            continue

        #When both dir has deleted
        if data1[doc][0][1] == 'deleted' and data2[doc][0][1] == 'deleted':
            continue
        #When Dir1's file has deleted
        elif data1[doc][0][1] == 'deleted':
            checkDeletion(data1,data2,f1,f2)
                
        #When Dir2's file has deleted
        elif data2[doc][0][1] == 'deleted':
            checkDeletion(data2,data1,f2,f1)
            
        # When both have details about something
        else:
            result1 = getFileData(f1)
            result2 = getFileData(f2)
            onetime = strToTime(data1[doc][0][0])
            twotime = strToTime(data2[doc][0][0])
            #If digest is the same 
            if data1[doc][0][1] == data2[doc][0][1]:
                if onetime > twotime:
                    data2[doc][0][0] = timeToStr(onetime)
                elif twotime > onetime:
                    data1[doc][0][0] = timeToStr(twotime)
            #When digests are different            
            else:
                #If file in dir1 is superseded
                if checkIfSuperseded(data2[doc],data1[doc]):
                    data2[doc].insert(0,result1)
                    copyfile(f1,f2)
                #If file in dir2 is superseded
                elif checkIfSuperseded(data1[doc],data2[doc]):
                    data1[doc].insert(0,result2)
                    copyfile(f2,f1)
                #Both versions are gg
                else:
                    if onetime > twotime:
                        data2[doc].insert(0,result1)
                        copyfile(f1,f2)
                    elif twotime > onetime:
                        data1[doc].insert(0,result2)
                        copyfile(f2,f1)

    #If Dir2 has a file Dir1 doesn't have
    for doc in data2.keys():
        f = os.path.join(dir2.path,doc)
        if doc not in data1.keys() and not data2[doc][0][1] == 'deleted':
            result = getFileData(f)
            data1[doc] = []
            data1[doc].append(result)
            newloc = os.path.join(dir1.path,doc)
            copyfile(f,newloc)
    
    #Write the changed results to .sync files
    dir1.saveSync(data1)
    dir2.saveSync(data2)

##################################################################################            
# Syncs sub directories 
def mergeSubDirectories(dir1,dir2):
    
    #Start with dir1
    for dirs in dir1.subDirs:
        fold1 = os.path.join(dir1.path,dirs)
        fold2 = os.path.join(dir2.path,dirs)
        #If dir1 has a subdir that dir2 does not have
        if dirs not in dir2.subDirs:
            copy_tree(fold1,fold2)
        else:
            subDir1 = Directory(fold1)
            subDir2 = Directory(fold2)
            syncDirectories(subDir1,subDir2)
            mergeSubDirectories(subDir1,subDir2)

    #If dir2 has a subdir that dir1 does not have
    for dirs in dir2.subDirs:
        fold1 = os.path.join(dir1.path,dirs)
        fold2 = os.path.join(dir2.path,dirs)
        if dirs not in dir1.subDirs:
            copy_tree(fold2,fold1)    
    
#Main
if __name__ == "__main__":
    #Find them directories baby.
    dir1 = Directory(sys.argv[1])
    dir2 = Directory(sys.argv[2])

    #Update sync files
    dir1.updateSyncFile()
    dir2.updateSyncFile()

    #Update sub directories
    dir1.updateSubDirectories()
    dir2.updateSubDirectories()

    #Time to Sync some shit baby
    syncDirectories(dir1,dir2)
    
    #Sync them sub directories
    mergeSubDirectories(dir1,dir2)
