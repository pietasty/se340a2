#!/usr/bin/env python3
import sys
import os
import json
import time
import hashlib
from shutil import copyfile


class Directory:
    def __init__(self,path):
        self.path = path
        if not os.path.isdir(path):
            os.makedirs(path)        
        self.files = [ f for f in os.listdir(path) if os.path.isfile(os.path.join(path,f)) and not f.startswith('.') and not f.endswith('~')]
        self.subDirs = [ d for d in os.listdir(path) if os.path.isdir(os.path.join(path,d)) and not f.startswith('.')]
        self.sync = os.path.join(path,".sync")
        if not os.path.isfile(self.sync):
            self.makeSyncFile(self.sync,path)

    def loadSync(self):
        with open(self.sync,'r') as f:
            data = json.load(f)
        return data

    def saveSync(self,data):
        with open(self.sync,'w') as f:
            json.dump(data,f)

    #Makes a Sync file when it doesn't exist 
    def makeSyncFile(self,sync,folder):
        data = {}
        for doc in self.files:
            f = os.path.join(folder,doc)
            result = getFileData(f)
            data[doc] = []
            data[doc].append(result)
        self.saveSync(data)

    #Update the Sync file to recent changes
    def updateSyncFile(self):
        data = self.loadSync()
        keys = data.keys()

        for doc in self.files:
            f = os.path.join(self.path,doc)
            result = getFileData(f)
            #Check to see if new files have been added
            if doc not in keys:
                data[doc] = []
                data[doc].append(result)
            #Update files to reflect most recent changes
            else:
                #If the digest is the same
                if result[1] == data[doc][0][1]:
                    resulttime = time.strptime(result[0], "%Y-%m-%d %H:%M:%S +1200") 	
                    jsontime = time.strptime(data[doc][0][0], "%Y-%m-%d %H:%M:%S +1200")
                    if resulttime > jsontime:
                        data[doc][0][0] = time.strftime("%Y-%m-%d %H:%M:%S +1200", resulttime)
                    elif jsontime > resulttime:
                        data[doc][0][0] = time.strftime("%Y-%m-%d %H:%M:%S +1200", jsontime)
                #If digest is different 
                else:
                    data[doc].insert(0,result)
                    
        #Check if a file has been deleted
        for doc in keys:
            if doc not in self.files and not data[doc][0][1] == 'deleted':
                updateSyncToDelete(data[doc])

        self.saveSync(data)





#################################################################################
# Return a tuple of modification date and digest of a file
def getFileData(file):
    hashing = hashlib.sha256()
    edittime = time.localtime(os.path.getmtime(file))
    formattime = time.strftime("%Y-%m-%d %H:%M:%S +1200", edittime)
    with open(file,'rb') as output:
        buf = output.read()
        hashing.update(buf)
    return (formattime,hashing.hexdigest())

################################################################################
# Does something useful
def updateSyncToDelete(syncinfo):
    formattime = time.strftime("%Y-%m-%d %H:%M:%S +1200", time.localtime())
    syncinfo.insert(0,(formattime,'deleted'))

#Function that syncs the two directories
def syncDirectories(dir1,dir2):
    #Check if files have been superseded
    def checkIfSuperseded(list1,list2):
        first = list1[0][1]
        for i in range(len(list2)):
            if first == list2[i][1]:
                return True
        return False

    folder1 = dir1.path
    folder2 = dir2.path    
    
    #Open the .sync files for analysis 
    data1 = dir1.loadSync()
    data2 = dir2.loadSync()

    keys1 = data1.keys()
    keys2 = data2.keys()

    #Start with dir1
    for doc in keys1:   
        if doc not in keys2 and data1[doc][0][1] == 'deleted':
            continue
        f1 = os.path.join(folder1,doc)
        f2 = os.path.join(folder2,doc) 
        # If dir1 has a file that dir2 doesn't
        if doc not in keys2:
            result1 = getFileData(f1)
            data2[doc] = []
            data2[doc].append(result1)
            copyfile(f1,f2)
            continue

        #When both dir has deleted
        if data1[doc][0][1] == 'deleted' and data2[doc][0][1] == 'deleted':
            continue
        #When Dir1's file has deleted
        elif data1[doc][0][1] == 'deleted':
            #Check to see if Dir2 has remade the file
            if len(data2[doc]) == 1:
                os.remove(f2)
                updateSyncToDelete(data2[doc])
            elif not data2[doc][0][1] == 'deleted' and data2[doc][1][1] == 'deleted':
                result2 = getFileData(f2)
                copyfile(f2,f1)
                data1[doc].insert(0,result2)
            else:
                os.remove(f2)
                updateSyncToDelete(data2[doc])
                
        #When Dir2's file has deleted
        elif data2[doc][0][1] == 'deleted':
            #Check to see if Dir1 has remade the file
            if len(data1[doc]) == 1:
                os.remove(f1)
                updateSyncToDelete(data1[doc])                
            elif not data1[doc][0][1] == 'deleted' and data1[doc][1][1] == 'deleted':
                result1 = getFileData(f1)
                copyfile(f1,f2)
                data2[doc].insert(0,result1)
            else:
                os.remove(f1)
                updateSyncToDelete(data1[doc])
            
        # When both have details about something
        else:
            result1 = getFileData(f1)
            result2 = getFileData(f2)
            onetime = time.strptime(data1[doc][0][0], "%Y-%m-%d %H:%M:%S +1200")
            twotime = time.strptime(data2[doc][0][0], "%Y-%m-%d %H:%M:%S +1200")
            #If digest is the same 
            if data1[doc][0][1] == data2[doc][0][1]:
                if onetime > twotime:
                    data2[doc][0][0] = time.strftime("%Y-%m-%d %H:%M:%S +1200", onetime)
                elif twotime > onetime:
                    data1[doc][0][0] = time.strftime("%Y-%m-%d %H:%M:%S +1200", twotime)
            #When digests are different            
            else:
                #If file in dir1 is superseded
                if checkIfSuperseded(data1[doc],data2[doc]):
                    data2[doc].insert(0,result1)
                    copyfile(f1,f2)
                #If file in dir2 is superseded
                elif checkIfSuperseded(data2[doc],data1[doc]):
                    data1[doc].insert(0,result2)
                    copyfile(f2,f1)
                #Both versions are gg
                else:
                    if onetime > twotime:
                        data2[doc].insert(0,result1)
                        copyfile(f1,f2)
                    elif twotime > onetime:
                        data1[doc].insert(0,result2)
                        copyfile(f2,f1)

    #If Dir2 has a file Dir1 doesn't have
    for doc in keys2:
        f = os.path.join(folder2,doc)
        if doc not in keys1 and not data2[doc][0][1] == 'deleted':
            result = getFileData(f)
            data1[doc] = []
            data1[doc].append(result)
            newloc = os.path.join(folder1,doc)
            copyfile(f,newloc)
    
    #Write the changed results to .sync files
    dir1.saveSync(data1)
    dir2.saveSync(data2)
            
#This functions does some dirty work.
def UpdateSubDirectories():
    pass

    
#Main
if __name__ == "__main__":
    #Find them directories baby.
    dir1 = Directory(sys.argv[1])
    dir2 = Directory(sys.argv[2])

    #Update them
    dir1.updateSyncFile()
    dir2.updateSyncFile()

    #Time to Sync some shit baby
    syncDirectories(dir1,dir2)
    

































